vocabulary V {
	type Time isa nat
	partial Next(Time):Time
	Start:Time
    
	type Jug
    type Liters isa nat
    MaxContents(Jug):Liters
    
    type Action constructed from {Fill(Jug),Transfer(Jug,Jug,Liters),Empty(Jug)}
	do(Time, Action)
    
    I_Contents(Jug):Liters
    
    //... more things
	
}

theory timeTheo:V{
	{
		Start = MIN[:Time].
		!t: Next(t) = t+1 <- Time(t+1).
	}
}

structure S : V {
	Time = {0..6}
	Jug = {J3;J5}
	Liters = {0..10}
	MaxContents = {J5->5;J3->3}
	I_Contents = {J3->0;J5->0;}
}

theory T : V {
	
}


procedure main() {
	print(modelexpand(merge(T,timeTheo),S)[1])
}	


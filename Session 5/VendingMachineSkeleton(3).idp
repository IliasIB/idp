LTCvocabulary V {
    type Time isa nat
    Start : Time
    partial Next(Time) : Time
    
    type beverage constructed from {coke, fanta, water, beer}
    type quantity = {0..10} isa nat
    type coins = {1;2;5;10} isa nat // Coins in 10 cents
    type amount = {0..30} isa nat // amounts up to 2 euros in steps of 10 cents

    
    Stock(Time, beverage) : quantity
    I_Stock(beverage) : quantity
    Price(beverage) : amount
    Amount(Time) : amount // current amount paid
    
    type action constructed from {pay(coins), press_button(beverage), ask_refund, restock}
    Do(Time, action)
}

theory timeTheo:V{
	{
		Start = MIN[:Time].
		!t: Next(t) = t+1 <- Time(t+1).
	}
}

theory T : V {
//TO DO
}

theory NoLargerAmount : V {
//TO DO
}

theory DoubleRestock : V {
//TO DO
}

structure S : V {
    Time = {0..25}
    Price = {coke() -> 12; fanta() -> 12; water() -> 10; beer() -> 15}
    I_Stock = {(coke(), 5); (fanta(), 5); (water(), 5); (beer(), 5)}
}

procedure simulate() {
    stdoptions.nbmodels = 10
    print("----> Starting interactive simulation")
	local states = initialise(T,S)
	
	//...and use one of those initial states to continue with (again and again and ...)
	while true do
		printmodels(states)
		print("Please enter which state to use")
		local num = tonumber(io.read("*line"))
		local chosen = states[num]
		states = progress(T,chosen)
	end	
}

theory init_invar : V_ss {
    // Add invariant for initial state
}

theory bistate_invar : V_bs {
    // Add invariant for bistate
    // Use predicate P for the current state and P_next for the next state
    // eg. P(4) => P_next(5) mean that if 4 is in P in this time step then 5 must be in P for the next time step. 
    
    
}

procedure prove_inv() {
    a,init,bistate,d,e = initialise(T, S)
    
    T_init = merge(init, init_invar)
    T_bi = merge(bistate, bistate_invar)
    
	// Add code here to print whether the invariant is maintained by the theory
}

procedure main() {
    simulate()
  //  print("Can't have an amount larger than 24 in the machine:")
 //   print(isinvariant(T, NoLargerAmount, S))
    
}